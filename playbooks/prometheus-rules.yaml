# Copied from https://github.com/coreos/prometheus-operator
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
data:
  etcd2.rules: |+
    ### General cluster availability ###

    # alert if another failed peer will result in an unavailable cluster
    ALERT EtcdInsufficientPeers
      IF absent(up{job="etcd"}) OR count(up{job="etcd"} == 0) > (count(up{job="etcd"}) / 2 - 1)
      FOR 3m
      LABELS {
        service = "etcd",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "Etcd cluster small",
        description = "If one more etcd peer goes down the cluster will be unavailable",
      }

    ### HTTP requests alerts ###

    # alert if more than 1% of requests to an HTTP endpoint have failed with a non 4xx response
    ALERT EtcdHighNumberOfFailedHTTPRequests
      IF absent(etcd_http_failed_total{job="etcd"}) OR
        sum by(method) (rate(etcd_http_failed_total{job="etcd", code!~"4[0-9]{2}"}[5m]))
        / sum by(method) (rate(etcd_http_received_total{job="etcd"}[5m])) > 0.01
      FOR 10m
      LABELS {
        service = "etcd",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "a high number of HTTP requests are failing",
        description = "{{ $value }}% of requests for {{ $labels.method }} failed on etcd instance {{ $labels.instance }}",
      }

    # alert if more than 5% of requests to an HTTP endpoint have failed with a non 4xx response
    ALERT EtcdHighNumberOfFailedHTTPRequests
      IF absent(etcd_http_failed_total{job="etcd"}) OR
        sum by(method) (rate(etcd_http_failed_total{job="etcd", code!~"4[0-9]{2}"}[5m]))
        / sum by(method) (rate(etcd_http_received_total{job="etcd"}[5m])) > 0.05
      FOR 5m
      LABELS {
        service = "etcd",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "a high number of HTTP requests are failing",
        description = "{{ $value }}% of requests for {{ $labels.method }} failed on etcd instance {{ $labels.instance }}",
      }

    # alert if 50% of requests get a 4xx response
    ALERT EtcdHighNumberOfFailedHTTPRequests
      IF absent(etcd_http_failed_total{job="etcd"}) OR
        sum by(method) (rate(etcd_http_failed_total{job="etcd", code=~"4[0-9]{2}"}[5m]))
        / sum by(method) (rate(etcd_http_received_total{job="etcd"}[5m])) > 0.5
      FOR 10m
      LABELS {
        service = "etcd",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "a high number of HTTP requests are failing",
        description = "{{ $value }}% of requests for {{ $labels.method }} failed with 4xx responses on etcd instance {{ $labels.instance }}",
      }

    # alert if the 99th percentile of HTTP requests take more than 150ms
    ALERT EtcdHTTPRequestsSlow
      IF absent(etcd_http_successful_duration_seconds_bucket) OR
        histogram_quantile(0.99, rate(etcd_http_successful_duration_seconds_bucket[5m])) > 0.15
      FOR 10m
      LABELS {
        service = "etcd",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "slow HTTP requests",
        description = "on ectd instance {{ $labels.instance }} HTTP requests to {{ $label.method }} are slow",
      }

    ### File descriptor alerts ###

    instance:fd_utilization = process_open_fds / process_max_fds

    # alert if file descriptors are likely to exhaust within the next 4 hours
    ALERT FdExhaustionClose
      IF absent(process_open_fds) OR absent(process_max_fds) OR
        predict_linear(instance:fd_utilization[1h], 3600 * 4) > 1
      FOR 10m
      LABELS {
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "file descriptors soon exhausted",
        description = "{{ $labels.job }} instance {{ $labels.instance }} will exhaust in file descriptors soon",
      }

    # alert if file descriptors are likely to exhaust within the next hour
    ALERT FdExhaustionClose
      IF absent(process_open_fds) OR absent(process_max_fds) OR
        predict_linear(instance:fd_utilization[10m], 3600) > 1
      FOR 10m
      LABELS {
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "file descriptors soon exhausted",
        description = "{{ $labels.job }} instance {{ $labels.instance }} will exhaust in file descriptors soon",
      }

    ### etcd proposal alerts ###

    # alert if there are several failed proposals within an hour
    ALERT EtcdHighNumberOfFailedProposals
      IF absent(etcd_server_proposals_failed_total{job="etcd"}) OR
        increase(etcd_server_proposals_failed_total{job="etcd"}[1h]) > 5
      LABELS {
        service = "etcd",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "a high number of failed proposals within the etcd cluster are happening",
        description = "etcd instance {{ $labels.instance }} has seen {{ $value }} proposal failures within the last hour",
      }

    ### etcd disk io latency alerts ###

    # alert if 99th percentile of fsync durations is higher than 500ms
    ALERT EtcdHighFsyncDurations
      IF absent(etcd_disk_wal_fsync_duration_seconds_bucket) OR
        histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) > 0.5
      FOR 10m
      LABELS {
        service = "etcd",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "high fsync durations",
        description = "ectd instance {{ $labels.instance }} fync durations are high",
      }
  kubernetes.rules: |+
    # NOTE: These rules were kindly contributed by the SoundCloud engineering team.

    ### Container resources ###

    cluster_namespace_controller_pod_container:spec_memory_limit_bytes =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          container_spec_memory_limit_bytes{container_name!=""},
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:spec_cpu_shares =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          container_spec_cpu_shares{container_name!=""},
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:cpu_usage:rate =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          irate(
            container_cpu_usage_seconds_total{container_name!=""}[5m]
          ),
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:memory_usage:bytes =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          container_memory_usage_bytes{container_name!=""},
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:memory_working_set:bytes =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          container_memory_working_set_bytes{container_name!=""},
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:memory_rss:bytes =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          container_memory_rss{container_name!=""},
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:memory_cache:bytes =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          container_memory_cache{container_name!=""},
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:disk_usage:bytes =
      sum by (cluster,namespace,controller,pod_name,container_name) (
        label_replace(
          container_disk_usage_bytes{container_name!=""},
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:memory_pagefaults:rate =
      sum by (cluster,namespace,controller,pod_name,container_name,scope,type) (
        label_replace(
          irate(
            container_memory_failures_total{container_name!=""}[5m]
          ),
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    cluster_namespace_controller_pod_container:memory_oom:rate =
      sum by (cluster,namespace,controller,pod_name,container_name,scope,type) (
        label_replace(
          irate(
            container_memory_failcnt{container_name!=""}[5m]
          ),
          "controller", "$1",
          "pod_name", "^(.*)-[a-z0-9]+"
        )
      )

    ### Cluster resources ###

    cluster:memory_allocation:percent =
      100 * sum by (cluster) (
        container_spec_memory_limit_bytes{pod_name!=""}
      ) / sum by (cluster) (
        machine_memory_bytes
      )

    cluster:memory_used:percent =
      100 * sum by (cluster) (
        container_memory_usage_bytes{pod_name!=""}
      ) / sum by (cluster) (
        machine_memory_bytes
      )

    cluster:cpu_allocation:percent =
      100 * sum by (cluster) (
        container_spec_cpu_shares{pod_name!=""}
      ) / sum by (cluster) (
        container_spec_cpu_shares{id="/"} * on(cluster,instance) machine_cpu_cores
      )

    cluster:node_cpu_use:percent =
      100 * sum by (cluster) (
        rate(node_cpu{mode!="idle"}[5m])
      ) / sum by (cluster) (
        machine_cpu_cores
      )

    ### API latency ###

    # Raw metrics are in microseconds. Convert to seconds.
    cluster_resource_verb:apiserver_latency:quantile_seconds{quantile="0.99"} =
      histogram_quantile(
        0.99,
        sum by(le,cluster,job,resource,verb) (apiserver_request_latencies_bucket)
      ) / 1e6
    cluster_resource_verb:apiserver_latency:quantile_seconds{quantile="0.9"} =
      histogram_quantile(
        0.9,
        sum by(le,cluster,job,resource,verb) (apiserver_request_latencies_bucket)
      ) / 1e6
    cluster_resource_verb:apiserver_latency:quantile_seconds{quantile="0.5"} =
      histogram_quantile(
        0.5,
        sum by(le,cluster,job,resource,verb) (apiserver_request_latencies_bucket)
      ) / 1e6

    ### Scheduling latency ###

    cluster:scheduler_e2e_scheduling_latency:quantile_seconds{quantile="0.99"} =
      histogram_quantile(0.99,sum by (le,cluster) (scheduler_e2e_scheduling_latency_microseconds_bucket)) / 1e6
    cluster:scheduler_e2e_scheduling_latency:quantile_seconds{quantile="0.9"} =
      histogram_quantile(0.9,sum by (le,cluster) (scheduler_e2e_scheduling_latency_microseconds_bucket)) / 1e6
    cluster:scheduler_e2e_scheduling_latency:quantile_seconds{quantile="0.5"} =
      histogram_quantile(0.5,sum by (le,cluster) (scheduler_e2e_scheduling_latency_microseconds_bucket)) / 1e6

    cluster:scheduler_scheduling_algorithm_latency:quantile_seconds{quantile="0.99"} =
      histogram_quantile(0.99,sum by (le,cluster) (scheduler_scheduling_algorithm_latency_microseconds_bucket)) / 1e6
    cluster:scheduler_scheduling_algorithm_latency:quantile_seconds{quantile="0.9"} =
      histogram_quantile(0.9,sum by (le,cluster) (scheduler_scheduling_algorithm_latency_microseconds_bucket)) / 1e6
    cluster:scheduler_scheduling_algorithm_latency:quantile_seconds{quantile="0.5"} =
      histogram_quantile(0.5,sum by (le,cluster) (scheduler_scheduling_algorithm_latency_microseconds_bucket)) / 1e6

    cluster:scheduler_binding_latency:quantile_seconds{quantile="0.99"} =
      histogram_quantile(0.99,sum by (le,cluster) (scheduler_binding_latency_microseconds_bucket)) / 1e6
    cluster:scheduler_binding_latency:quantile_seconds{quantile="0.9"} =
      histogram_quantile(0.9,sum by (le,cluster) (scheduler_binding_latency_microseconds_bucket)) / 1e6
    cluster:scheduler_binding_latency:quantile_seconds{quantile="0.5"} =
      histogram_quantile(0.5,sum by (le,cluster) (scheduler_binding_latency_microseconds_bucket)) / 1e6

    ALERT K8SNodeDown
      IF absent(up{job="kubelet"}) OR up{job="kubelet"} == 0
      FOR 1h
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Kubelet cannot be scraped",
        description = "Prometheus could not scrape a {{ $labels.job }} for more than one hour",
      }

    # FIXME: investigate how to check kubelet node readiness
    #ALERT K8SNodeNotReady
    #  IF absent(kube_node_status_ready) OR
    #    kube_node_status_ready{condition="true"} == 0
    #  FOR 1h
    #  LABELS {
    #    service = "k8s",
    #    severity = "warning",
    #  }
    #  ANNOTATIONS {
    #    summary = "Node status is NotReady",
    #    description = "The Kubelet on {{ $labels.node }} has not checked in with the API, or has set itself to NotReady, for more than an hour",
    #  }

    #ALERT K8SManyNodesNotReady
    #  IF
    #    count by (cluster) (kube_node_status_ready{condition="true"} == 0) > 1
    #    AND
    #      (
    #        count by (cluster) (kube_node_status_ready{condition="true"} == 0)
    #      /
    #        count by (cluster) (kube_node_status_ready{condition="true"})
    #      ) > 0.2
    #  FOR 1m
    #  LABELS {
    #    service = "k8s",
    #    severity = "critical",
    #  }
    #  ANNOTATIONS {
    #    summary = "Many K8s nodes are Not Ready",
    #    description = "{{ $value }} K8s nodes (more than 10% of cluster {{ $labels.cluster }}) are in the NotReady state.",
    #  }

    ALERT K8SKubeletNodeExporterDown
      IF absent(up{name="node-exporter"}) OR up{name="node-exporter"} == 0
      FOR 15m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Kubelet node_exporter cannot be scraped",
        description = "Prometheus could not scrape a {{ $labels.job }} for more than one hour.",
      }

    ALERT K8SKubeletDown
      IF absent(up{job="kubelet"}) OR
        count by (cluster) (up{job="kubelet"} == 0) / count by (cluster) (up{job="kubelet"}) > 0.1
      FOR 1h
      LABELS {
        service = "k8s",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "Many Kubelets cannot be scraped",
        description = "Prometheus failed to scrape more than 10% of kubelets, or all Kubelets have disappeared from service discovery.",
      }

    ALERT K8SApiserverDown
      IF absent(up{job="kubernetes"}) OR up{job="kubernetes"} == 0
      FOR 15m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "API server unreachable",
        description = "An API server could not be scraped.",
      }

    # Disable for non HA kubernetes setups.
    ALERT K8SApiserverDown
      IF absent({job="kubernetes"}) OR
        (count by(cluster) (up{job="kubernetes"} == 1) < count by(cluster) (up{job="kubernetes"}))
      FOR 5m
      LABELS {
        service = "k8s",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "API server unreachable",
        description = "Prometheus failed to scrape multiple API servers, or all API servers have disappeared from service discovery.",
      }

    ALERT K8SSchedulerDown
      IF absent(up{job="kube-scheduler"}) OR
        (count by(cluster) (up{job="kube-scheduler"} == 1) == 0)
      FOR 5m
      LABELS {
        service = "k8s",
        severity = "critical",
      }
      ANNOTATIONS {
        summary = "Scheduler is down",
        description = "There is no running K8S scheduler. New pods are not being assigned to nodes.",
      }

    ALERT K8SControllerManagerDown
      IF absent(up{job="kube-controller-manager"}) OR
        (count by(cluster) (up{job="kube-controller-manager"} == 1) == 0)
      FOR 5m
      LABELS {
        service = "k8s",
        severity = "critical",
      }
      ANNOTATIONS {
        summary = "Controller manager is down",
        description = "There is no running K8S controller manager. Deployments and replication controllers are not making progress.",
      }

    ALERT K8SConntrackTableFull
      IF absent(node_nf_conntrack_entries) OR absent(node_nf_conntrack_entries_limit) OR
        100*node_nf_conntrack_entries / node_nf_conntrack_entries_limit > 50
      FOR 10m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Number of tracked connections is near the limit",
        description = "The nf_conntrack table is {{ $value }}% full.",
      }

    ALERT K8SConntrackTableFull
      IF absent(node_nf_conntrack_entries) OR absent(node_nf_conntrack_entries_limit) OR
        100*node_nf_conntrack_entries / node_nf_conntrack_entries_limit > 90
      LABELS {
        service = "k8s",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "Number of tracked connections is near the limit",
        description = "The nf_conntrack table is {{ $value }}% full.",
      }

    ALERT K8STooManyOpenFiles
      IF absent(process_open_fds{job="kubelet"}) OR absent(process_open_fds{job="kubernetes"}) OR
        100*process_open_fds{job=~"kubelet|kubernetes"} / process_max_fds > 50
      FOR 10m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "{{ $labels.job }} has too many open file descriptors",
        description = "{{ $labels.node }} is using {{ $value }}% of the available file/socket descriptors.",
      }

    ALERT K8STooManyOpenFiles
      IF absent(process_open_fds{job="kubelet"}) OR absent(process_open_fds{job="kubernetes"}) OR
        100*process_open_fds{job=~"kubelet|kubernetes"} / process_max_fds > 80
      FOR 10m
      LABELS {
        service = "k8s",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "{{ $labels.job }} has too many open file descriptors",
        description = "{{ $labels.node }} is using {{ $value }}% of the available file/socket descriptors.",
      }

    # FIXME: check on conntrack metrics more closely
    # To catch the conntrack sysctl de-tuning when it happens
    #ALERT K8SConntrackTuningMissing
    #  IF node_nf_conntrack_udp_timeout > 10
    #  FOR 10m
    #  LABELS {
    #    service = "k8s",
    #    severity = "warning",
    #  }
    #  ANNOTATIONS {
    #    summary = "Node does not have the correct conntrack tunings",
    #    description = "Nodes keep un-setting the correct tunings, investigate when it happens.",
    #  }

    # Some verbs excluded because they are expected to be long-lasting:
    # WATCHLIST is long-poll, CONNECT is `kubectl exec`.
    ALERT K8SApiServerLatency
      IF histogram_quantile(
          0.99,
          sum without (instance,node,resource) (apiserver_request_latencies_bucket{verb!~"CONNECT|WATCHLIST|WATCH"})
        ) / 1e6 > 1.0
      FOR 10m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Kubernetes apiserver latency is high",
        description = "99th percentile Latency for {{ $labels.verb }} requests to the kube-apiserver is higher than 1s.",
      }

    ALERT K8SKubeletTooManyPods
      IF absent(kubelet_running_pod_count) OR kubelet_running_pod_count > 100
      LABELS {
        service = "k8s",
        severity = "warning",
      }
      ANNOTATIONS {
        summary = "Kubelet is close to pod limit",
        description = "Kubelet {{$labels.instance}} is running {{$value}} pods, close to the limit of 110",
      }
  calico.rules: |+
    ### TODO ###
    # STATUS:
    # felix_cluster_num_hosts
    #

    ALERT FelixDown
      IF absent(up{job="felix"}) OR up{job="felix"} == 0
      FOR 30m
      LABELS {
        service = "calico",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Calico Felix cannot be scraped",
        description = "Prometheus could not scrape a {{ $labels.job }} for more than half hour",
      }

    ALERT FelixManyDown
      IF absent(up{job="felix"}) OR
        count by (cluster) (up{job="felix"} == 0) / count by (cluster) (up{job="felix"}) > 0.1
      FOR 1h
      LABELS {
        service = "calico",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "Many Calico Felixes cannot be scraped",
        description = "Prometheus failed to scrape more than 10% of Calico Felixes, or all Felixes have disappeared from service discovery.",
      }

    ALERT FelixNoPolicies
      IF absent(felix_iptables_chains) OR felix_iptables_chains < 1
      FOR 5m
      LABELS {
        service = "calico",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "No Calico iptables chains defined or metric is not found",
        description = "Node $label.instance does not have any Calico iptables chains which may affect connectivity.",
      }

    # Alert if there errors for the last hour for:
    #  felix_int_dataplane_failures
    #  felix_ipset_errors
    #  felix_iptables_save_errors
    #  felix_iptables_restore_errors
    ALERT FelixNumberOfDataplaneFailures
      IF absent(felix_int_dataplane_failures) OR
        increase(felix_int_dataplane_failures[1h]) > 5
      LABELS {
        service = "calico",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "A high number of dataplane failures within Felix are happening",
        description = "Felix instance {{ $labels.instance }} has seen {{ $value }} dataplane failures within the last hour",
      }

    ALERT FelixNumberIpsetErrors
      IF absent(felix_ipset_errors) OR
        increase(felix_ipset_errors[1h]) > 5
      LABELS {
        service = "calico",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "A high number of ipset errors within Felix are happening",
        description = "Felix instance {{ $labels.instance }} has seen {{ $value }} ipset errors within the last hour",
      }

    ALERT FelixNumberIptablesSaveErrors
      IF absent(felix_iptables_save_errors) OR
        increase(felix_iptables_save_errors[1h]) > 5
      LABELS {
        service = "calico",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "A high number of iptables save errors within Felix are happening",
        description = "Felix instance {{ $labels.instance }} has seen {{ $value }} iptables save errors within the last hour",
      }

    ALERT FelixNumberIptablesRestoreErrors
      IF absent(felix_iptables_restore_errors) OR
        increase(felix_iptables_restore_errors[1h]) > 5
      LABELS {
        service = "calico",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "A high number of iptables restore errors within Felix are happening",
        description = "Felix instance {{ $labels.instance }} has seen {{ $value }} iptables restore errors within the last hour",
      }

    # 95th percentile example
    # alert if the 95th percentile of dataplane apply takes more than 150ms
    ALERT FelixDataplaneApplySlow
      IF absent(felix_int_dataplane_apply_time_seconds_bucket) OR
        histogram_quantile(0.95, rate(felix_int_dataplane_apply_time_seconds_bucket[5m])) > 0.15
      FOR 10m
      LABELS {
        service = "calico",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Slow Felix dataplane apply",
        description = "On Felix instance {{ $labels.instance }} dataplane apply is slow",
      }
  netchecker.rules: |+
    ALERT NetCheckerAgentErrors
      IF absent(ncagent_error_count_total) OR
        increase(ncagent_error_count_total[1h]) > 5
      LABELS {
        service = "netchecker",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "A high number of errors in Netchecker are happening",
        description = "Netchecker Agent {{ $labels.instance }} has seen {{ $value }} errors within the last hour",
      }
    # Report interval is 15s, so we should see at least 15 reports per 5m (ideally 20)
    ALERT NetCheckerReportsMissing
      IF absent(ncagent_report_count_total) OR
        increase(ncagent_report_count_total[5m]) < 15
      LABELS {
        service = "netchecker",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "A low number of reports in Netchecker are happening",
        description = "Netchecker Agent {{ $labels.instance }} has reported only {{ $value }} times for the last 5 minutes",
      }
